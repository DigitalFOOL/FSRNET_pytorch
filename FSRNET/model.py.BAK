import torch
import torch.nn as nn


class Net(torch.nn.Module):
    def __init__(self, num_channels, base_filter, upscale_factor=1):
        super(Net, self).__init__()

        self.layers1 = torch.nn.Sequential(
            nn.Conv2d(in_channels=num_channels, out_channels=base_filter, kernel_size=3, stride=1, padding=1,
                      bias=True),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
        )
        
        resnet_blocks = []
        for _ in range(3):
            resnet_blocks.append(ResnetBlock(64,kernel=3,stride=1,padding=1))
        self.residual_layers = nn.Sequential(*resnet_blocks)

        self.output_conv = nn.Conv2d(64,num_channels,kernel_size=3,stride=1,padding=1)

        '''
        self.layers2 = torch.nn.Sequential(
            nn.Conv2d(in_channels=base_filter, out_channels=base_filter // 2, kernel_size=5, stride=1, padding=2,
                      bias=True),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels=base_filter // 2, out_channels=num_channels * (upscale_factor ** 2), kernel_size=5, stride=1, padding=2,
                      bias=True),
            # nn.PixelShuffle很容易的适合实现sub-pixel convolution
            nn.PixelShuffle(upscale_factor)
        )
        '''

    def forward(self, x):

        x = self.layers1(x)

        residual = x
        x = self.residual_layers(x)
        x = torch.add(x,residual)
        
        out =self.output_conv(x) 
        return out

    def weight_init(self, mean, std):
        for m in self._modules:
            normal_init(self._modules[m], mean, std)


def normal_init(m, mean, std):
    if isinstance(m, nn.ConvTranspose2d) or isinstance(m, nn.Conv2d):
        m.weight.data.normal_(mean, std)
        m.bias.data.zero_()


class ResnetBlock(nn.Module):
    def __init__(self, num_channel, kernel=3, stride=1, padding=1):
        super(ResnetBlock, self).__init__()
        self.conv1 = nn.Conv2d(num_channel, num_channel, kernel, stride, padding)
        self.conv2 = nn.Conv2d(num_channel, num_channel, kernel, stride, padding)
        self.bn = nn.BatchNorm2d(num_channel)
        self.activation = nn.ReLU(inplace=True)

    def forward(self, x):
        residual = x
        x = self.bn(self.conv1(x))
        x = self.activation(x)
        x = self.bn(self.conv2(x))
        x = torch.add(x, residual)
        return x
